{"version":3,"sources":["Select.js","codeGen.js","Col1.js","Col2.js","App.js","serviceWorker.js","index.js","col1.png","col2.png"],"names":["styleMain","display","justifyContent","alignItems","styleCol1","backgroundImage","png_col1","backgroundSize","backgroundPosition","width","height","marginRight","styleCol2","png_col2","Select","style","textAlign","to","upperCaseFirstChar","s","charAt","toUpperCase","slice","lowerCaseFirstChar","toLowerCase","format","js","prettier","parser","plugins","parserBable","trailingComma","singleQuote","printWidth","e","splitCamel","str","replace","generateFakeData","getApiName","getApiJson","name","generateResource","databaseName","getApiUrl","putApiName","putApiUrl","generateRedux","containerName","generateContainer","generateColumns","Col1","useState","setDatabaseName","setContainerName","setGetApiName","setGetApiUrl","setGetApiJson","setPutApiName","setPutApiUrl","uperCaseDatabaseName","uperCaseContainerName","Container","Box","TextField","id","label","value","onChange","target","margin","multiline","rows","fullWidth","language","docco","Col2","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8c7cba73.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box } from '@material-ui/core';\nimport png_col1 from './col1.png';\nimport png_col2 from './col2.png';\n\nconst styleMain = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst styleCol1 = {\n  backgroundImage: `url(${png_col1})`,\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  width: 100,\n  height: 100,\n  marginRight: 30,\n}\n\nconst styleCol2 = {\n  ...styleCol1,\n  backgroundImage: `url(${png_col2})`,\n}\n\nconst Select = () => {\n  return (\n    <div style={{height: '100vh'}}>\n      <h2 style={{textAlign: 'center'}}>Select layout</h2>\n      <div style={styleMain}>\n        <Link to=\"/col1\">\n          <div>\n            <div style={styleCol1} />\n            <h3>single column</h3>\n          </div>\n        </Link>\n\n        <Link to=\"/col2\">\n          <div>\n            <div style={styleCol2} />\n            <h3>double column</h3>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Select;","import prettier from \"prettier/standalone\";\nimport parserBable from 'prettier/parser-babylon';\n\nexport const upperCaseFirstChar = (s = '') => s.charAt(0).toUpperCase() + s.slice(1);\nconst lowerCaseFirstChar = (s = '') => s.charAt(0).toLowerCase() + s.slice(1);\nconst format = (js) => {\n  try {\n    return prettier.format(js, {\n      parser: 'babel',\n      plugins: [parserBable],\n      trailingComma: 'all',\n      singleQuote: true,\n      printWidth: 200,\n    })\n  } catch (e) {\n    return '// 等你輸入好我在開始工作';\n  }\n};\nconst splitCamel = (str) => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1_').toUpperCase();\n\nexport const generateFakeData = (getApiName, getApiJson) => {\n  const name = `fake${upperCaseFirstChar(getApiName)}`;\n  return format(`\n      const ${name} = () => {\n        return (\n          ${getApiJson}\n        );\n      };\n      \n      export default {\n        ${name},\n      };\n    `);\n};\n\nexport const generateResource = ({ databaseName, getApiName, getApiUrl, putApiName, putApiUrl }) => {\n  return format(`\nimport CommonUtils from '~~utils/CommonUtils';\nimport ApiService from '~~apis/ApiService';\nimport Fake${upperCaseFirstChar(databaseName)}Data from '~~apis/fakeData/Fake${upperCaseFirstChar(databaseName)}Data';\n\nconst debugStatus = {\n  ${getApiName}: true,\n  ${putApiName}: true,\n};\n\n\nconst ${upperCaseFirstChar(databaseName)}Resource = {\n\n  ${getApiName}: () => {\n    if (debugStatus.${getApiName}) {\n      console.log('::::: API ${getApiName} :::::');\n      return CommonUtils.fakeApiHelper(1000, 'success', Fake${upperCaseFirstChar(databaseName)}Data.fake${upperCaseFirstChar(getApiName)}());\n    }\n    return ApiService.get('${getApiUrl}');\n  },\n\n  ${putApiName}: (data) => {\n    if (debugStatus.${putApiName}) {\n      console.log('::::: API ${putApiName} :::::', data);\n      return CommonUtils.fakeApiHelper(1000, 'success', 'UPDATE SUCCESS');\n    }\n    return ApiService.put('${putApiUrl}', { data });\n  },\n};\n\nexport default ${upperCaseFirstChar(databaseName)}Resource;\n`);\n};\n\nexport const generateRedux = ({databaseName, getApiName, putApiName, containerName}) => {\n  return format(`\n  \n  import { handleActions } from 'redux-actions';\nimport {\n  Observable, Subject, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, concat, forkJoin,\n} from 'rxjs';\nimport { ofType } from 'redux-observable';\nimport {\n  mergeMap, concatMap, tap, mapTo, map, catchError, retry, retryWhen, takeUntil, flatMap, delay,\n} from 'rxjs/operators';\nimport Resource from '~~apis/resource';\nimport * as LoadingActions from '~~redux/Loading/LoadingActions';\nimport * as NotificationSystemActions from '~~hoc/NotificationSystem/NotificationSystemActions';\n\nconst actionTypes = {\n  ${splitCamel(databaseName)}___${splitCamel(getApiName)}: '${splitCamel(databaseName)}___${splitCamel(getApiName)}',\n  ${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS: '${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS',\n  ${splitCamel(databaseName)}___${splitCamel(putApiName)}: '${splitCamel(databaseName)}___${splitCamel(putApiName)}',\n};\n\nexport const ${getApiName} = () => {\n  return {\n    type: actionTypes.${splitCamel(databaseName)}___${splitCamel(getApiName)},\n  };\n};\n\nexport const ${getApiName}Success = (response) => {\n  return {\n    type: actionTypes.${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS,\n    ...response.data\n  };\n};\n\nexport const ${putApiName} = (data) => {\n  return {\n    type: actionTypes.${splitCamel(databaseName)}___${splitCamel(putApiName)},\n    data\n  };\n};\n\nexport const ${getApiName}Epic = (action$, state$) => {\n  return action$.pipe(\n    ofType(actionTypes.${splitCamel(databaseName)}___${splitCamel(getApiName)}),\n    mergeMap((action) => {\n      return concat(\n        of(LoadingActions.toggleLoadingStatus(true)),\n        from(Resource.${upperCaseFirstChar(databaseName)}Resource.${getApiName}())\n          .pipe(\n            mergeMap(response => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(${getApiName}Success(response)),\n              );\n            }),\n            catchError(error => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(NotificationSystemActions.pushNotification({\n                  message: '取得列表有誤，請稍後再試',\n                  level: 'error'\n                }))\n              );\n            })\n          ));\n    })\n  );\n};\n\nexport const ${putApiName}Epic = (action$, state$) => {\n  return action$.pipe(\n    ofType(actionTypes.${splitCamel(databaseName)}___${splitCamel(putApiName)}),\n    mergeMap((action) => {\n      const { data } = action;\n      return concat(\n        of(LoadingActions.toggleLoadingStatus(true)),\n        from(Resource.${upperCaseFirstChar(databaseName)}Resource.${putApiName}(data))\n          .pipe(\n            mergeMap(response => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(${getApiName}()),\n                of(NotificationSystemActions.pushNotification({\n                  message: '更新成功',\n                  level: 'success'\n                }))\n              );\n            }),\n            catchError(error => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(NotificationSystemActions.pushNotification({\n                  message: '取得列表有誤，請稍後再試',\n                  level: 'error'\n                }))\n              );\n            })\n          ));\n    })\n  );\n};\n\n// material price reducer\nconst ${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS = (state, payload) => {\n  return {\n    ...state,\n    ${lowerCaseFirstChar(containerName)}: {\n      ...state.${lowerCaseFirstChar(containerName)},\n      ...payload,\n    }\n  };\n};\n\n\nconst initial${upperCaseFirstChar(containerName)} = {\n  date: {},\n  ${lowerCaseFirstChar(containerName)}: [],\n};\n\nconst initialState = {\n  ${lowerCaseFirstChar(containerName)}: initial${upperCaseFirstChar(containerName)},\n};\n\nexport const reducer = handleActions({\n  ${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS,\n}, initialState);\n\nexport const epics = [\n  ${getApiName}Epic,\n  ${putApiName}Epic,\n];\n\n  \n  `);\n}\n\nexport const generateContainer = ({ databaseName, containerName, getApiName, putApiName, }) => {\n  return format(`\n  import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport _get from 'lodash/get';\nimport * as R from 'ramda';\nimport useCSDB from '~~features/Database/components/useCSDB';\nimport Icon, { IconName } from '~~elements/Icon';\nimport Button from '~~elements/Button';\nimport Table from '~~elements/Table';\nimport { InlineBtns, InnerContainer } from '~~features/Database/DatabaseStyles';\nimport SearchBar from '~~features/Database/components/SearchBar';\nimport * as ${upperCaseFirstChar(databaseName)}Actions from '~~features/Database/ME/${upperCaseFirstChar(databaseName)}/${upperCaseFirstChar(databaseName)}Actions';\nimport getColumns from './ColumnSetting';\n\nconst ${upperCaseFirstChar(containerName)} = (props) => {\n  const {\n    ${getApiName},\n    ${putApiName},\n    date,\n    ${lowerCaseFirstChar(containerName)}List,\n  } = props;\n\n  useEffect(() => {\n    ${getApiName}();\n  }, []);\n\n  const extendsCSDBPorps = {\n    mainTable: ${lowerCaseFirstChar(containerName)}List,\n    initialSortInfo: { dataIndex: 'size', sortOrder: 'ascend' },\n    initialFilterInfo: { keyword: '', dataIndex: 'size' },\n  };\n\n  const {\n    // For table\n    isEditMode,\n    setEditMode,\n    mainTableList,\n    editModeList,\n    handleTableChange,\n    handleSetEditMode,\n    handleOnEditItem,\n    differenceList,\n    // For search bar\n    keyword,\n    setKeyword,\n    handleSearch,\n    handleResetSearchBar,\n    // For checkbox\n    showArchive,\n    setShowArchive,\n    checkboxColumn,\n    // For add modal\n    isAddModalOpen,\n    setAddModal,\n  } = useCSDB(extendsCSDBPorps);\n\n  const handleSave = () => {\n    const data = {\n      nextId: _get(date, 'nextId', false),\n      items: differenceList.map(item => ({ id: item.id, next: item.next }))\n    };\n    setEditMode(false);\n    ${putApiName}(data);\n  };\n\n  const extendsColumnPorps = {\n    ...props,\n    isEditMode,\n    date,\n    checkboxColumn,\n    handleOnEditItem,\n  };\n\n  return (\n    <InnerContainer>\n      <div className=\"inner-content\">\n        <div className=\"content-header\">\n          <div className=\"title\">\n            這邊你要自己改名字喔，沒改到別怪我ＱＱ\n          </div>\n        </div>\n        <div className=\"content-row\">\n          <InlineBtns>\n            <SearchBar\n              width=\"28rem\"\n              placeholder=\"這邊你要自己改名字喔，沒改到別怪我ＱＱ\"\n              onInputChange={setKeyword}\n              value={keyword}\n              onSearch={handleSearch}\n              onReset={handleResetSearchBar}\n              disabled={isEditMode}\n            />\n            {/* <ArchiveSwitch\n              isChecked={showArchive}\n              onChange={() => setShowArchive(!showArchive)}\n            /> */}\n          </InlineBtns>\n          {\n            isEditMode ?\n              <InlineBtns>\n                <Button\n                  color=\"black\"\n                  border={false}\n                  round\n                  onClick={() => handleSetEditMode(false)}\n                >Cancel\n                </Button>\n                <Button\n                  color=\"green\"\n                  border={false}\n                  round\n                  onClick={handleSave}\n                >Save\n                </Button>\n              </InlineBtns> :\n              <InlineBtns>\n                {/* 新增 */}\n                {/* <Icon\n                  icon={IconName.BtnAddGroup}\n                  size=\"2rem\"\n                  onClick={() => setAddModal(true)}\n                /> */}\n                {/* 修改 */}\n                <Icon\n                  icon={IconName.BtnEditGroup}\n                  size=\"2rem\"\n                  onClick={() => handleSetEditMode(true)}\n                  disabled={mainTableList.length === 0 || !date.nextId}\n                />\n                {/* 封存 */}\n                {/* <Icon\n                  icon={IconName.BtnArchive}\n                  size=\"2rem\"\n                  // onClick={() => handleArchive()}\n                  // disabled={selectedIdList.length === 0}\n                /> */}\n              </InlineBtns>\n          }\n        </div>\n        <Table\n          headerColor=\"blue\"\n          columns={getColumns(extendsColumnPorps)}\n          dataSource={isEditMode ? editModeList : mainTableList}\n          pagination={false}\n          onChange={handleTableChange}\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </InnerContainer>\n  );\n};\n\n\nconst mapStateToProps = (state) => {\n  return {\n    ${lowerCaseFirstChar(containerName)}List: state.${lowerCaseFirstChar(databaseName)}.${lowerCaseFirstChar(containerName)}.${lowerCaseFirstChar(containerName)},\n    date: state.${lowerCaseFirstChar(databaseName)}.${lowerCaseFirstChar(containerName)}.date,\n  };\n};\n\nconst mapDispatchToProps = {\n  ${getApiName}: ${upperCaseFirstChar(databaseName)}Actions.${getApiName},\n  ${putApiName}: ${upperCaseFirstChar(databaseName)}Actions.${putApiName},\n};\n\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n)(${upperCaseFirstChar(containerName)});\n\n  `)\n}\n\n\nexport const generateColumns = () => {\n  return format(`\n  import React from 'react';\nimport _get from 'lodash/get';\nimport { comma } from '~~utils/Math';\nimport NumberInput from '~~features/Database/components/NumberInput';\n\n\nconst getColumns = props => {\n  const {\n    isEditMode,\n    date,\n    handleOnEditItem,\n  } = props;\n  return [\n    {\n      dataIndex: 'id',\n      title: 'ID',\n      width: '5%',\n      align: 'center',\n      render: (val, record, index) => index + 1,\n    },\n    {\n      dataIndex: 'size',\n      title: 'Size',\n      width: '40%',\n      defaultSortOrder: 'ascend',\n      sorter: !isEditMode,\n    },\n    {\n      title: _get(date, 'last', '－'),\n      dataIndex: 'last',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'lastId', false),\n      render: (val) => comma(val, 8, '－'),\n    },\n    {\n      title: _get(date, 'current', '－'),\n      dataIndex: 'current',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'currentId', false),\n      render: (val) => comma(val, 8, '－'),\n    },\n    {\n      title: _get(date, 'next', '－'),\n      dataIndex: 'next',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'nextId', false),\n      render: (val, record) => (\n        isEditMode ?\n          <NumberInput\n            value={val}\n            onChange={(value) => handleOnEditItem(value, record.id, 'next')}\n          />  :\n          comma(val, 8, '－'))\n    },\n  ];\n};\n\nexport default getColumns;\n\n  `)\n}","import React, { useState } from 'react';\nimport { Container, Box, TextField } from '@material-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { upperCaseFirstChar, generateFakeData, generateResource, generateRedux, generateContainer, generateColumns } from './codeGen';\n\n\nfunction Col1() {\n  const [databaseName, setDatabaseName] = useState('DieCutCleanSheet');\n  const [containerName, setContainerName] = useState('TypePrice');\n  const [getApiName, setGetApiName] = useState('getTypePrice');\n  const [getApiUrl, setGetApiUrl] = useState('/database/diecut/typePrice');\n  const [getApiJson, setGetApiJson] = useState('{\\r\\n\"date\": {},\\r\\n \"typePrice\": []\\r\\n}');\n  const [putApiName, setPutApiName] = useState('putTypePrice');\n  const [putApiUrl, setPutApiUrl] = useState('/database/diecut/modify/typePrice');\n\n  const uperCaseDatabaseName = upperCaseFirstChar(databaseName);\n  const uperCaseContainerName = upperCaseFirstChar(containerName);\n  return (\n    <Container>\n      <h1>\bCode Generator Single Column</h1>\n      <Box>\n        <TextField id=\"input-database\" label=\"Database\" value={databaseName} onChange={e => setDatabaseName(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-containername\" label=\"Container Name\" value={containerName} onChange={e => setContainerName(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-getapiname\" label=\"Get API Name\" value={getApiName} onChange={e => setGetApiName(e.target.value)} margin=\"normal\" />\n        <TextField style={{ width: 400 }} id=\"input-getapiurl\" label=\"Get API URL\" value={getApiUrl} onChange={e => setGetApiUrl(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-getapijson\" label=\"Get API JSON\" value={getApiJson} onChange={e => setGetApiJson(e.target.value)} multiline rows={5} fullWidth margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-putapiname\" label=\"PUT API Name\" value={putApiName} onChange={e => setPutApiName(e.target.value)} margin=\"normal\" />\n        <TextField style={{ width: 400 }} id=\"input-putapiurl\" label=\"PUT API URL\" value={putApiUrl} onChange={e => setPutApiUrl(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <h3>frontEnd/src/apis/fakeData/Fake{uperCaseDatabaseName}Data.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateFakeData(getApiName, getApiJson)}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/apis/resource/DatabaseResources/{uperCaseDatabaseName}Resource.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateResource({ databaseName, getApiName, getApiUrl, putApiName, putApiUrl })}\n        </SyntaxHighlighter>\n      </Box>\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseDatabaseName}Redux.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateRedux({ databaseName, getApiName, putApiName, containerName})}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/{uperCaseContainerName}.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {\n            generateContainer({ databaseName, containerName, getApiName, putApiName })\n          }\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/ColumnSetting.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateColumns({ databaseName, getApiName, containerName, })}\n        </SyntaxHighlighter>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Col1;\n","import React, { useState } from 'react';\nimport { Container, Box, TextField } from '@material-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { upperCaseFirstChar, generateFakeData, generateResource, generateRedux, generateContainer, generateColumns } from './codeGen';\n\n\nfunction Col2() {\n  const [databaseName, setDatabaseName] = useState('DieCutCleanSheet');\n  const [containerName, setContainerName] = useState('TypePrice');\n  const [getApiName, setGetApiName] = useState('getTypePrice');\n  const [getApiUrl, setGetApiUrl] = useState('/database/diecut/typePrice');\n  const [getApiJson, setGetApiJson] = useState('{\\r\\n\"date\": {},\\r\\n \"typePrice\": []\\r\\n}');\n  const [putApiName, setPutApiName] = useState('putTypePrice');\n  const [putApiUrl, setPutApiUrl] = useState('/database/diecut/modify/typePrice');\n\n  const uperCaseDatabaseName = upperCaseFirstChar(databaseName);\n  const uperCaseContainerName = upperCaseFirstChar(containerName);\n  return (\n    <Container>\n      <h1>\bCode Generator Double Columns</h1>\n      <Box>\n        <TextField id=\"input-database\" label=\"Database\" value={databaseName} onChange={e => setDatabaseName(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-containername\" label=\"Container Name\" value={containerName} onChange={e => setContainerName(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-getapiname\" label=\"Get API Name\" value={getApiName} onChange={e => setGetApiName(e.target.value)} margin=\"normal\" />\n        <TextField style={{ width: 400 }} id=\"input-getapiurl\" label=\"Get API URL\" value={getApiUrl} onChange={e => setGetApiUrl(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-getapijson\" label=\"Get API JSON\" value={getApiJson} onChange={e => setGetApiJson(e.target.value)} multiline rows={5} fullWidth margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-putapiname\" label=\"PUT API Name\" value={putApiName} onChange={e => setPutApiName(e.target.value)} margin=\"normal\" />\n        <TextField style={{ width: 400 }} id=\"input-putapiurl\" label=\"PUT API URL\" value={putApiUrl} onChange={e => setPutApiUrl(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <h3>frontEnd/src/apis/fakeData/Fake{uperCaseDatabaseName}Data.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateFakeData(getApiName, getApiJson)}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/apis/resource/DatabaseResources/{uperCaseDatabaseName}Resource.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateResource({ databaseName, getApiName, getApiUrl, putApiName, putApiUrl })}\n        </SyntaxHighlighter>\n      </Box>\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseDatabaseName}Redux.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateRedux({ databaseName, getApiName, putApiName, containerName})}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/{uperCaseContainerName}.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {\n            generateContainer({ databaseName, containerName, getApiName, putApiName })\n          }\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/ColumnSetting.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateColumns({ databaseName, getApiName, containerName, })}\n        </SyntaxHighlighter>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Col2;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Select from './Select';\nimport Col1 from './Col1';\nimport Col2 from './Col2';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route path=\"/\" component={Select} exact />\n      <Route path=\"/Col1\" component={Col1} />\n      <Route path=\"/Col2\" component={Col2} />\n    </HashRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/col1.a90b3d69.png\";","module.exports = __webpack_public_path__ + \"static/media/col2.279e3769.png\";"],"sourceRoot":""}