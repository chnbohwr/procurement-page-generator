{"version":3,"sources":["codeGen.js","App.js","serviceWorker.js","index.js"],"names":["upperCaseFirstChar","s","charAt","toUpperCase","slice","lowerCaseFirstChar","toLowerCase","format","js","prettier","parser","plugins","parserBable","trailingComma","splitCamel","str","replace","generateFakeData","getApiName","getApiJson","name","generateResource","databaseName","getApiUrl","putApiName","putApiUrl","generateActions","generateEpic","generateReducer","containerName","generateContainer","generateColumns","App","useState","setDatabaseName","setContainerName","setGetApiName","setGetApiUrl","setGetApiJson","setPutApiName","setPutApiUrl","uperCaseDatabaseName","uperCaseContainerName","Container","Box","TextField","id","label","value","onChange","e","target","margin","multiline","rows","fullWidth","language","style","docco","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6147f4dc.chunk.js","sourcesContent":["import prettier from \"prettier/standalone\";\nimport parserBable from 'prettier/parser-babylon';\n\nexport const upperCaseFirstChar = (s = '') => s.charAt(0).toUpperCase() + s.slice(1);\nconst lowerCaseFirstChar = (s = '') => s.charAt(0).toLowerCase() + s.slice(1);\nconst format = (js) => prettier.format(js, { parser: 'babel', plugins: [parserBable], trailingComma: 'all' });\nconst splitCamel = (str) => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1_').toUpperCase();\n\nexport const generateFakeData = (getApiName, getApiJson) => {\n  const name = `fake${upperCaseFirstChar(getApiName)}`;\n  return format(`\n      const ${name} = () => {\n        return (\n          ${getApiJson}\n        );\n      };\n      \n      export default {\n        ${name},\n      };\n    `);\n};\n\nexport const generateResource = ({ databaseName, getApiName, getApiUrl, putApiName, putApiUrl }) => {\n  return format(`\nimport CommonUtils from '~~utils/CommonUtils';\nimport ApiService from '~~apis/ApiService';\nimport Fake${upperCaseFirstChar(databaseName)}Data from '~~apis/fakeData/Fake${upperCaseFirstChar(databaseName)}Data';\n\nconst debugStatus = {\n  ${getApiName}: true,\n  ${putApiName}: true,\n};\n\n\nconst ${upperCaseFirstChar(databaseName)}Resource = {\n\n  ${getApiName}: () => {\n    if (debugStatus.${getApiName}) {\n      console.log('::::: API ${getApiName} :::::');\n      return CommonUtils.fakeApiHelper(1000, 'success', Fake${upperCaseFirstChar(databaseName)}Data.fake${upperCaseFirstChar(getApiName)}());\n    }\n    return ApiService.get('${getApiUrl}');\n  },\n\n  ${putApiName}: (data) => {\n    if (debugStatus.${putApiName}) {\n      console.log('::::: API ${putApiName} :::::', data);\n      return CommonUtils.fakeApiHelper(1000, 'success', 'UPDATE SUCCESS');\n    }\n    return ApiService.put('${putApiUrl}', { data });\n  },\n};\n\nexport default ${upperCaseFirstChar(databaseName)}Resource;\n`);\n};\n\n\nexport const generateActions = ({ databaseName, getApiName, putApiName }) => {\n  return format(`\n  export const actionTypes = {\n    ${splitCamel(databaseName)}___${splitCamel(getApiName)}: '${splitCamel(databaseName)}___${splitCamel(databaseName)}',\n    ${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS: '${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS',\n    ${splitCamel(databaseName)}___${splitCamel(putApiName)}: '${splitCamel(databaseName)}___${splitCamel(putApiName)}',\n  };\n\n  export const ${getApiName} = () => {\n    return {\n      type: actionTypes.${splitCamel(databaseName)}___${splitCamel(databaseName)},\n    };\n  };\n  \n  export const ${getApiName}Success = (response) => {\n    return {\n      type: actionTypes.${splitCamel(databaseName)}___${splitCamel(databaseName)}_SUCCESS,\n      ...response.data\n    };\n  };\n  \n  export const ${putApiName} = () => {\n    return {\n      type: actionTypes.${splitCamel(databaseName)}___${splitCamel(putApiName)},\n    };\n  };\n  \n  `)\n};\n\n\nexport const generateEpic = ({ databaseName, getApiName, putApiName }) => {\n  return format(`\n  import { Observable, Subject, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, concat, forkJoin } from 'rxjs';\nimport { ofType } from 'redux-observable';\nimport { mergeMap, concatMap, tap, mapTo, map, catchError, retry, retryWhen, takeUntil, flatMap, delay } from 'rxjs/operators';\nimport Resource from '~~apis/resource';\nimport * as LoadingActions from '~~redux/Loading/LoadingActions';\nimport * as NotificationSystemActions from '~~hoc/NotificationSystem/NotificationSystemActions';\n\nimport {\n  actionTypes,\n\n  ${getApiName},\n  ${getApiName}Success\n\n} from './${upperCaseFirstChar(databaseName)}Actions';\n\nexport const ${getApiName}Epic = (action$, state$) => {\n  return action$.pipe(\n    ofType(actionTypes.${splitCamel(databaseName)}___${splitCamel(getApiName)}),\n    mergeMap((action) => {\n      return concat(\n        of(LoadingActions.toggleLoadingStatus(true)),\n        from(Resource.${upperCaseFirstChar(databaseName)}Resource.${getApiName}())\n          .pipe(\n            mergeMap(response => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(${getApiName}Success(response)),\n              );\n            }),\n            catchError(error => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(NotificationSystemActions.pushNotification({\n                  message: '取得列表有誤，請稍後再試',\n                  level: 'error'\n                }))\n              );\n            })\n          ));\n    })\n  );\n};\n\nexport const ${putApiName}Epic = (action$, state$) => {\n  return action$.pipe(\n    ofType(actionTypes.${splitCamel(databaseName)}___${splitCamel(putApiName)}),\n    mergeMap((action) => {\n      const { data } = action;\n      return concat(\n        of(LoadingActions.toggleLoadingStatus(true)),\n        from(Resource.${upperCaseFirstChar(databaseName)}Resource.${putApiName}(data))\n          .pipe(\n            mergeMap(response => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(${getApiName}()),\n                of(NotificationSystemActions.pushNotification({\n                  message: '更新成功',\n                  level: 'success'\n                }))\n              );\n            }),\n            catchError(error => {\n              return concat(\n                of(LoadingActions.toggleLoadingStatus(false)),\n                of(NotificationSystemActions.pushNotification({\n                  message: '取得列表有誤，請稍後再試',\n                  level: 'error'\n                }))\n              );\n            })\n          ));\n    })\n  );\n};\n\nexport default [\n  ${getApiName}Epic,\n  ${putApiName}Epic,\n];\n\n  `)\n}\n\nexport const generateReducer = ({ databaseName, containerName, getApiName }) => {\n  return format(`\n  import { handleActions } from 'redux-actions';\nimport _groupBy from 'lodash/groupBy';\nimport _get from 'lodash/get';\nimport { actionTypes } from '../${upperCaseFirstChar(databaseName)}/${upperCaseFirstChar(databaseName)}Actions';\n\nconst initial${upperCaseFirstChar(containerName)} = {\n  date: {},\n  ${lowerCaseFirstChar(containerName)}: [],\n};\n\nconst initialState = {\n  ${lowerCaseFirstChar(containerName)}: initial${upperCaseFirstChar(containerName)},\n};\n\nexport default handleActions({\n\n  [actionTypes.${splitCamel(databaseName)}___${splitCamel(getApiName)}_SUCCESS]: (state, payload) => {\n    return {\n      ...state,\n      ${lowerCaseFirstChar(containerName)}: {\n        ...state.${lowerCaseFirstChar(containerName)},\n        ...payload,\n      }\n    };\n  },\n\n}, initialState);\n\n  `);\n}\n\nexport const generateContainer = ({ databaseName, containerName, getApiName, putApiName, }) => {\n  return format(`\n  import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport _get from 'lodash/get';\nimport * as R from 'ramda';\nimport useCSDB from '~~features/Database/components/useCSDB';\nimport Icon, { IconName } from '~~elements/Icon';\nimport Button from '~~elements/Button';\nimport Table from '~~elements/Table';\nimport { InlineBtns, InnerContainer } from '~~features/Database/DatabaseStyles';\nimport SearchBar from '~~features/Database/components/SearchBar';\nimport * as ${upperCaseFirstChar(databaseName)}Actions from '~~features/Database/ME/${upperCaseFirstChar(databaseName)}/${upperCaseFirstChar(databaseName)}Actions';\nimport getColumns from './ColumnSetting';\n\nconst ${upperCaseFirstChar(containerName)} = (props) => {\n  const {\n    ${getApiName},\n    ${putApiName},\n    date,\n    ${lowerCaseFirstChar(containerName)}List,\n  } = props;\n\n  useEffect(() => {\n    ${getApiName}();\n  }, []);\n\n  const extendsCSDBPorps = {\n    mainTable: ${lowerCaseFirstChar(containerName)}List,\n    initialSortInfo: { dataIndex: 'size', sortOrder: 'ascend' },\n    initialFilterInfo: { keyword: '', dataIndex: 'size' },\n  };\n\n  const {\n    // For table\n    isEditMode,\n    setEditMode,\n    mainTableList,\n    editModeList,\n    handleTableChange,\n    handleSetEditMode,\n    handleOnEditItem,\n    differenceList,\n    // For search bar\n    keyword,\n    setKeyword,\n    handleSearch,\n    handleResetSearchBar,\n    // For checkbox\n    showArchive,\n    setShowArchive,\n    checkboxColumn,\n    // For add modal\n    isAddModalOpen,\n    setAddModal,\n  } = useCSDB(extendsCSDBPorps);\n\n  const handleSave = () => {\n    const data = {\n      nextId: _get(date, 'nextId', false),\n      fanBaselinePrice: differenceList.map(item => ({ id: item.id, next: item.next }))\n    };\n    setEditMode(false);\n    ${putApiName}(data);\n  };\n\n  const extendsColumnPorps = {\n    ...props,\n    isEditMode,\n    date,\n    checkboxColumn,\n    handleOnEditItem,\n  };\n\n  return (\n    <InnerContainer>\n      <div className=\"inner-content\">\n        <div className=\"content-header\">\n          <div className=\"title\">\n            這邊你要自己改名字喔，沒改到別怪我ＱＱ\n          </div>\n        </div>\n        <div className=\"content-row\">\n          <InlineBtns>\n            <SearchBar\n              width=\"28rem\"\n              placeholder=\"這邊你要自己改名字喔，沒改到別怪我ＱＱ\"\n              onInputChange={setKeyword}\n              value={keyword}\n              onSearch={handleSearch}\n              onReset={handleResetSearchBar}\n              disabled={isEditMode}\n            />\n            {/* <ArchiveSwitch\n              isChecked={showArchive}\n              onChange={() => setShowArchive(!showArchive)}\n            /> */}\n          </InlineBtns>\n          {\n            isEditMode ?\n              <InlineBtns>\n                <Button\n                  color=\"black\"\n                  border={false}\n                  round\n                  onClick={() => handleSetEditMode(false)}\n                >Cancel\n                </Button>\n                <Button\n                  color=\"green\"\n                  border={false}\n                  round\n                  onClick={handleSave}\n                >Save\n                </Button>\n              </InlineBtns> :\n              <InlineBtns>\n                {/* 新增 */}\n                {/* <Icon\n                  icon={IconName.BtnAddGroup}\n                  size=\"2rem\"\n                  onClick={() => setAddModal(true)}\n                /> */}\n                {/* 修改 */}\n                <Icon\n                  icon={IconName.BtnEditGroup}\n                  size=\"2rem\"\n                  onClick={() => handleSetEditMode(true)}\n                  disabled={mainTableList.length === 0 || !date.nextId}\n                />\n                {/* 封存 */}\n                {/* <Icon\n                  icon={IconName.BtnArchive}\n                  size=\"2rem\"\n                  // onClick={() => handleArchive()}\n                  // disabled={selectedIdList.length === 0}\n                /> */}\n              </InlineBtns>\n          }\n        </div>\n        <Table\n          headerColor=\"blue\"\n          columns={getColumns(extendsColumnPorps)}\n          dataSource={isEditMode ? editModeList : mainTableList}\n          pagination={false}\n          onChange={handleTableChange}\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </InnerContainer>\n  );\n};\n\n\nconst mapStateToProps = (state) => {\n  return {\n    ${lowerCaseFirstChar(containerName)}List: state.${lowerCaseFirstChar(databaseName)}.${lowerCaseFirstChar(containerName)}.${lowerCaseFirstChar(containerName)},\n    date: state.${lowerCaseFirstChar(databaseName)}.${lowerCaseFirstChar(containerName)}.date,\n  };\n};\n\nconst mapDispatchToProps = {\n  ${getApiName}: ${upperCaseFirstChar(databaseName)}Actions.${getApiName},\n  ${putApiName}: ${upperCaseFirstChar(databaseName)}Actions.${putApiName},\n};\n\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n)(${upperCaseFirstChar(containerName)});\n\n  `)\n}\n\n\nexport const generateColumns = () => {\n  return format(`\n  import React from 'react';\nimport _get from 'lodash/get';\nimport { comma } from '~~utils/Math';\nimport NumberInput from '~~features/Database/components/NumberInput';\n\n\nconst getColumns = props => {\n  const {\n    isEditMode,\n    date,\n    handleOnEditItem,\n  } = props;\n  return [\n    {\n      dataIndex: 'id',\n      title: 'ID',\n      width: '5%',\n      align: 'center',\n      render: (val, record, index) => index + 1,\n    },\n    {\n      dataIndex: 'size',\n      title: 'Size',\n      width: '40%',\n      defaultSortOrder: 'ascend',\n      sorter: !isEditMode,\n    },\n    {\n      title: _get(date, 'last', '－'),\n      dataIndex: 'last',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'lastId', false),\n      render: (val) => comma(val, 8, '－'),\n    },\n    {\n      title: _get(date, 'current', '－'),\n      dataIndex: 'current',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'currentId', false),\n      render: (val) => comma(val, 8, '－'),\n    },\n    {\n      title: _get(date, 'next', '－'),\n      dataIndex: 'next',\n      width: '15%',\n      sorter: !isEditMode && _get(date, 'nextId', false),\n      render: (val, record) => (\n        isEditMode ?\n          <NumberInput\n            value={val}\n            onChange={(value) => handleOnEditItem(value, record.id, 'next')}\n          />  :\n          comma(val, 8, '－'))\n    },\n  ];\n};\n\nexport default getColumns;\n\n  `)\n}","import React, { useState } from 'react';\nimport { Container, Box, TextField } from '@material-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { upperCaseFirstChar, generateFakeData, generateResource, generateActions, generateEpic, generateReducer, generateContainer, generateColumns } from './codeGen';\n\n\nfunction App() {\n  const [databaseName, setDatabaseName] = useState('DieCutCleanSheet');\n  const [containerName, setContainerName] = useState('TypePrice');\n  const [getApiName, setGetApiName] = useState('getTypePrice');\n  const [getApiUrl, setGetApiUrl] = useState('/database/diecut/typePrice');\n  const [getApiJson, setGetApiJson] = useState('{\\r\\n\"date\": {},\\r\\n \"typePrice\": []\\r\\n}');\n  const [putApiName, setPutApiName] = useState('putTypePrice');\n  const [putApiUrl, setPutApiUrl] = useState('/database/diecut/modify/typePrice');\n\n  const uperCaseDatabaseName = upperCaseFirstChar(databaseName);\n  const uperCaseContainerName = upperCaseFirstChar(containerName);\n    return (\n    <Container>\n      <h1>\bCode Generator</h1>\n      <Box>\n        <TextField id=\"input-database\" label=\"Database\" value={databaseName} onChange={e => setDatabaseName(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-containername\" label=\"Container Name\" value={containerName} onChange={e => setContainerName(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-getapiname\" label=\"Get API Name\" value={getApiName} onChange={e => setGetApiName(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-getapiurl\" label=\"Get API URL\" value={getApiUrl} onChange={e => setGetApiUrl(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-getapijson\" label=\"Get API JSON\" value={getApiJson} onChange={e => setGetApiJson(e.target.value)} multiline rows={5} fullWidth margin=\"normal\" />\n      </Box>\n      <Box>\n        <TextField id=\"input-putapiname\" label=\"PUT API Name\" value={putApiName} onChange={e => setPutApiName(e.target.value)} margin=\"normal\" />\n        <TextField id=\"input-putapiurl\" label=\"PUT API URL\" value={putApiUrl} onChange={e => setPutApiUrl(e.target.value)} margin=\"normal\" />\n      </Box>\n      <Box>\n        <h3>frontEnd/src/apis/fakeData/Fake{uperCaseDatabaseName}Data.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateFakeData(getApiName, getApiJson)}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/apis/resource/DatabaseResources/{uperCaseDatabaseName}Resource.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateResource({ databaseName, getApiName, getApiUrl, putApiName, putApiUrl })}\n        </SyntaxHighlighter>\n      </Box>\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseDatabaseName}Actions.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateActions({ databaseName, getApiName, putApiName, })}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseDatabaseName}Epics.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateEpic({ databaseName, getApiName, putApiName, })}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseDatabaseName}Reducer.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateReducer({ databaseName, getApiName, containerName, })}\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/{uperCaseContainerName}.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n        {\n          generateContainer({databaseName, containerName, getApiName, putApiName})\n        }\n        </SyntaxHighlighter>\n      </Box>\n\n      <Box>\n        <h3>frontEnd/src/features/Database/ME/{uperCaseDatabaseName}/{uperCaseContainerName}/ColumnSetting.js</h3>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {generateColumns({ databaseName, getApiName, containerName, })}\n        </SyntaxHighlighter>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}